{
  "name": "domjs",
  "version": "0.2.3",
  "description": "Build dom structure easy way with plain js. Client and server side template engine",
  "keywords": [
    "dom",
    "build",
    "builder",
    "template",
    "html"
  ],
  "author": {
    "name": "Mariusz Nowak",
    "email": "medikoo+domjs@medikoo.com",
    "url": "http://www.medikoo.com/"
  },
  "main": "lib/html5",
  "repository": {
    "type": "git",
    "url": "git://github.com/medikoo/domjs.git"
  },
  "bugs": {
    "email": "medikoo+domjs@medikoo.com",
    "url": "https://github.com/medikoo/domjs/issues"
  },
  "scripts": {
    "test": "node ./node_modules/tad/bin/tad lib"
  },
  "dependencies": {
    "es5-ext": "0.8.x"
  },
  "devDependencies": {
    "jsdom": "0.2.x",
    "tad": "0.1.x"
  },
  "licence": "MIT",
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.4"
  },
  "readme": "# domjs - client and server side dom template engine\n\nBuild dom structure easy way with plain JavaScript. Can be used on both client\nand server side.\n\n## Instalation\n\n### Node.js\n\nIn your project path:\n\n\t$ npm install domjs\n\n### Browser\n\nYou can easily create browser bundle with help of [modules-webmake](https://github.com/medikoo/modules-webmake). Mind that it relies on some EcmaScript5 features, so for older browsers you need as well [es5-shim](https://github.com/kriskowal/es5-shim)\n\n## Usage\n\nWhat would be the easiest, most intuitive way to build html5 DOM tree with plain\nJavaScript ?\n\n```javascript\nvar mytemplate = function () {\n  header(\n    h1('Heading'),\n    h2('Subheading'));\n\n  nav(\n    ul({ 'class': 'breadcrumbs' },\n      li(a({ href: '/' }, 'Home')),\n      li(a({ href: '/section/'}, 'Section')),\n      li(a('Subject'))));\n\n  article(\n    p('Lorem ipsum...'));\n\n  footer('Footer stuff');\n};\n```\n\nThis is how templates for domjs are written.\n\nTo get `mytemplate` function content turned into DOM\n(literally _DocumentFragment_):\n\n```javascript\nvar domjs = require('domjs/lib/html5')(document);\n\nvar mydom = domjs.build(mytemplate);\n```\n\n### Other notes\n\nYou can save references to elements and operate on them later:\n\n```javascript\nvar myul = ul(li('one'), li('two'), li('three'));\n\n// ... some code ...\n\n// add extra items to myul\nmyul(li('four'), li('five'));\n\n// append myul into other element\ndiv(myul);\n```\n\nYou can access DOM elements directly, just invoke returned function with no\narguments\n\n```javascript\n(myul() instanceof DOMElement) === true\n```\n\nComment type nodes:\n\n```javascript\n_comment('my comment');\n```\n\nCDATA type nodes\n\n```javascript\n_cdata('cdata text');\n```\n\nText nodes in main scope:\n\n```javascript\n_text('my text');\n```\n\nElements with names that are reserved keywords in JavaScript language, like\n'var', should be created with preceding underscore added to its name:\n\n```javascript\n_var('var content');\n```\n\n## Tests [![Build Status](https://secure.travis-ci.org/medikoo/domjs.png?branch=master)](https://secure.travis-ci.org/medikoo/domjs)\n\nAs `jsdom` won't install properly on Windows domjs can only be tested only on _*nix_ systems\n\n\t$ npm test\n",
  "readmeFilename": "README.md",
  "_id": "domjs@0.2.3",
  "dist": {
    "shasum": "c1fb1cd04d48ee67e9bdcea3f10b522da0052622",
    "tarball": "http://registry.npmjs.org/domjs/-/domjs-0.2.3.tgz"
  },
  "_from": "domjs@",
  "_npmVersion": "1.2.10",
  "_npmUser": {
    "name": "medikoo",
    "email": "medikoo+npm@medikoo.com"
  },
  "maintainers": [
    {
      "name": "medikoo",
      "email": "medikoo+npm@medikoo.com"
    }
  ],
  "directories": {},
  "_shasum": "c1fb1cd04d48ee67e9bdcea3f10b522da0052622",
  "_resolved": "https://registry.npmjs.org/domjs/-/domjs-0.2.3.tgz"
}
